scene:
    animated: false
    background:
        color: white

sources:
    nextzen:
        type: MVT
        url: https://tile.nextzen.org/tilezen/vector/v1/256/all/{z}/{x}/{y}.mvt
        url_params:
            api_key: your-nextzen-api-key
        max_zoom: 8
        rasters: [heightmap, normals]
    heightmap:
        type: Raster
        url: https://tile.nextzen.org/tilezen/terrain/v1/256/terrarium/{z}/{x}/{y}.png
        url_params:
            api_key: your-nextzen-api-key
        max_zoom: 14
        rasters: [normals]
    normals:
        type: Raster
        url: https://tile.nextzen.org/tilezen/terrain/v1/256/normal/{z}/{x}/{y}.png
        url_params:
            api_key: your-nextzen-api-key
        max_zoom: 14

styles:
    hillshade:
        base: raster
        lighting: false
        # texcoords: true
        raster: custom
        shaders:
            blocks:
                global: |
                    float unpack(vec4 h) {
                        // GPU reads each 0-255 channel as range 0-1, right where we want it
                        // assemble to get height
                        return (h.r * 1. + h.g / 256. + h.b / 65536.);
                    }
                color: |
                    // sample elevation
                    float h = unpack(sampleRaster(0));
                    // sample normals
                    vec3 normals = normalize(sampleRaster(1).xyz * 2. - 1.);

                    // adjust width of line based on normals to produce thinner line on flatter surfaces
                    float adj = (1. / normals.z) - 1.;
                    // width
                    float w = .05 * pow(2., 20. - u_tile_origin.z) * adj;
                    // spacing
                    float zoom_power = 20. - u_tile_origin.z;
                    float power = pow(2., zoom_power);
                    float scale = 100000.;
                    float val = fract(h  * scale / power);
                    float triangle = abs(1. * val - 1.0);
                    float square = smoothstep(.0, w, triangle);
                    square *= smoothstep(w, w+w, val);
                    color.rgb = vec3(square) + vec3(.8);

                    val = fract(h  * 10000.);
                    triangle = abs(1. * val - 1.0);
                    square = smoothstep(.0, w, triangle);
                    square *= smoothstep(w, w+w, val);
                    color.rgb *= vec3(square);
                    color.a = 1.;

layers:
    earth:
        data: { source: nextzen }
        draw:
            hillshade:
                order: 1
    water:
        data: { source: nextzen }
        filter: { kind: [lakes], boundary: true }
        draw:
            lines:
                order: 2
                color: [.3, .3, .3]
                width: 1px
            polygons:
                order: 4
                color: white
